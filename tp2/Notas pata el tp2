Count Min Sketch:
Necesito un heap de minimos, asi siempre sale el de menor frecuencia hasta ese momento
y quedan los mas grandes, el heap podria ordenar por frecuencia y por orden alfabetico en caso de 
que sean iguales.
Un caso borde, suponete que tenes en el coun min sketch dos TT que tienen igual de apariciones, por ej 6
pero uno es, no se #InstagramDown y el otro #EmojiDelMate, suponete que esta encolado en el heap InstagramDown,
deberiamos desencolarlo y meter EmojiDelMate (preguntar).
Cuando encoles en el heap podes usar tuplas, que tengan clave y cantidad de apariciones, y comparas, si empatan
en numero comparas las cadenas, caso contrario igual que siempre, sube el que tenga el menor numero en este caso
porque es un heap de minimos.
Por anotaciones tenemos que usar tres arreglos y tres funciones de hash (NO usar un hash).

Hay que leer linea por linea el archivo, primero deberiamos leer, aumentar en los tres arreglos la cantidad
con las funciones de hash y ahi si todavia el heap no tiene k elementos creamos la tupla y encolamos, en caso de
tenes k elementos comparamos como dije mas arriba. 
Necesito una funcion para obtener el minimo de los tres arreglos, asi se con que valor crear la tupla y encolarlo
en el heap.

Resumiendo:
1)El TDA tiene que tener tres funciones hash, tres arreglos para las frecuencias, un heap.
2) Antes de encolar en el heap, primero actualizas en los tres arreglos de frecuencia, una vez que hacemos eso, creas la tupla que vas a encolar con el minimo valor de esos tres arreglos, Si esta vacio o la cantidad de elementos del heap es < k encolamos directamente, caso contrario usamos la nueva primitiva que busca si esta el elemento en el heap y le suma uno a la frecuencia, si esa primitiva da false, ahi desencolamos y encolamos la nuevo tupla creada. IMPORTANTE, SI GANA QUE TIENE QUE SALIR ALGO DEL HEAP, CUANDO SALE LIBERAS TODA LA ESTRUCTURA TUPLA, O SEA HACES UNA FUNCION PARA BORRAR LA CLAVE 

3)Cuando encolas podes encolar por las frecuencias, si tienen frecuencias iguales, ordenas alfabeticamente,
o sea la funcion de comparacion que le pases hace lo siguiente cuando encolas, primero se fija las frecuencias, ya que eso pesa mas, segundo, si empatan en frecuencia, se fijan alfabeticamente quien gana y listo, asi vas ordenando, de esta forma te aseguras que siempre tenes el minimo de frecuencias, y el que alfabeticamente este mas lejos de la A, IMPORTANTE ESO DEL ALFABETO EN EL HEAP, si tenes Arbol vs Casa, gana casa por ende el min va a ser Casa.
4)una vez que el contador de lineas llega a su fin entras a desencolar hasta que quede vacio, siempre que desencoles pregunta por el numero de apariencias, si el numero de apariencias cambia hace printf y pones la nueva frecuencia
5)IMPORTANTE: EL CONTADOR DE LINEAS DICE DE A CUANTO A CUANTO LEER, POR ENDE CADA CIERTA CANTIDAD DE LINEAS IMPRIMIS, PONES EL CONTADOR EN CERO, Y VOLVES A HACER LO MISMO DEL PASO 1 AL 4


Procesar usuarios:
Sabemos la cant max de caracteres, ergo se me hace que podemos usar RadixSort quizas para los nombres, sino usar CountingSort para ordenar por numeros y chau, o primero por RadixSort asi te queda alfabeticamente, y despues
CountingSort, CountingSort necesitas si o si, porque necesitas un ordenamiento no comparativo, y RadixSort usa
la estabilidad de CountingSort.
Por el tiempo que piden necesitamos CountingSort si o si.
NO hay que contar hashtags repetidos.
Entonces resumiento pasos:
1)Necesitas un hash
2)Hasheas por usuario.
3)Te fijas si esta o no:
3i)Si esta, vas chequeando si ya twitteo esas cosas, y vas sumando cuando conviene (o sea cuando no es un tweet repetido)
3ii)Si NO esta, lo insertas en el hash, y ahi haces lo de chequear los tweets
4)Cuando terminas de leer todo, tenes que obtener todos los usuarios que estan en el hash, y los guardas en algun lugar
5)Yo ordenaria primero alfabeticamente y luego por la cantidad de tweets
6)Imprimis las cosas que te pidan

NECESITAMOS DEFINIR:
El tamanio inicial de los arreglos de frecuencias, buscar las funciones de hash, como van a ser los nodos que encolemos en el heap, o puede llamarse tupla (cant de apariciones, tweet)

CASOS BORDE:
Cuando encolamos y todavia no se lleno de K elementos, podriamos estar encolando tweets iguales y eso esta mal, asi que cuando encolas sin que se llene el K pregunta si las claves son iguales, si lo son, obviamente pones la nueva porque tiene mas frecuencias, pero no aumentas el numero K seria una forma de "actualizar los datos". si las claves son distintas ahi si creas la tupla y encolas.
una vez que se completa el nivel K de elementos, ahi si no tenes que comparar claves, porque si encolaste Arbol y la frec es 5, si volves a encontrar arbol la frec es 6 y ahi si o si gana
por las dudas dejo anotada esta duda, que pasa si no se actualiza en todos los arreglos (creo que nunca pasa ya que arbol con las tres funciones de hash siempre manda a otro lado)



HACER EL .H DE MIN_SKETCH CON SUS PRIMITIVAS

PROBLEMAS:

tunear el heap para ver si dicha clave esta, total va a ser O(k) buscarla, si esta actualizas su contenido, y aplicas downheap desde ahi

HACEMOS una primitiva del heap que sea actualizar y chau, onda buscar va a ser O(k), si llega a modificar, arreglarlo va a ser aplicar downheap(desde esa posicion), y no necesitas for, porque si o si los de abajo son mas grandes que tu padre (que es mas chico que vos)

bool actualizar(heap)  false, no estaba, entonces encolas, caso contrario actualizas y downheap y chau
